{"ast":null,"code":"import _toConsumableArray from \"/home/snorlax5133/test/react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\n/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nexport default function createGetCssVar() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  function appendVar() {\n    for (var _len = arguments.length, vars = new Array(_len), _key = 0; _key < _len; _key++) {\n      vars[_key] = arguments[_key];\n    }\n    if (!vars.length) {\n      return '';\n    }\n    return \", var(--\".concat(prefix ? \"\".concat(prefix, \"-\") : '').concat(vars[0]).concat(appendVar.apply(void 0, _toConsumableArray(vars.slice(1))), \")\");\n  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n\n  var getCssVar = function getCssVar(field) {\n    for (var _len2 = arguments.length, vars = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      vars[_key2 - 1] = arguments[_key2];\n    }\n    return \"var(--\".concat(prefix ? \"\".concat(prefix, \"-\") : '').concat(field).concat(appendVar.apply(void 0, vars), \")\");\n  };\n  return getCssVar;\n}","map":{"version":3,"names":["createGetCssVar","prefix","arguments","length","undefined","appendVar","_len","vars","Array","_key","concat","apply","_toConsumableArray","slice","getCssVar","field","_len2","_key2"],"sources":["/home/snorlax5133/test/react-app/node_modules/@mui/system/esm/cssVars/createGetCssVar.js"],"sourcesContent":["/**\n * The benefit of this function is to help developers get CSS var from theme without specifying the whole variable\n * and they does not need to remember the prefix (defined once).\n */\nexport default function createGetCssVar(prefix = '') {\n  function appendVar(...vars) {\n    if (!vars.length) {\n      return '';\n    }\n\n    return `, var(--${prefix ? `${prefix}-` : ''}${vars[0]}${appendVar(...vars.slice(1))})`;\n  } // AdditionalVars makes `getCssVar` less strict, so it can be use like this `getCssVar('non-mui-variable')` without type error.\n\n\n  const getCssVar = (field, ...vars) => {\n    return `var(--${prefix ? `${prefix}-` : ''}${field}${appendVar(...vars)})`;\n  };\n\n  return getCssVar;\n}"],"mappings":";AAAA;AACA;AACA;AACA;AACA,eAAe,SAASA,eAAeA,CAAA,EAAc;EAAA,IAAbC,MAAM,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;EACjD,SAASG,SAASA,CAAA,EAAU;IAAA,SAAAC,IAAA,GAAAJ,SAAA,CAAAC,MAAA,EAANI,IAAI,OAAAC,KAAA,CAAAF,IAAA,GAAAG,IAAA,MAAAA,IAAA,GAAAH,IAAA,EAAAG,IAAA;MAAJF,IAAI,CAAAE,IAAA,IAAAP,SAAA,CAAAO,IAAA;IAAA;IACxB,IAAI,CAACF,IAAI,CAACJ,MAAM,EAAE;MAChB,OAAO,EAAE;IACX;IAEA,kBAAAO,MAAA,CAAkBT,MAAM,MAAAS,MAAA,CAAMT,MAAM,SAAM,EAAE,EAAAS,MAAA,CAAGH,IAAI,CAAC,CAAC,CAAC,EAAAG,MAAA,CAAGL,SAAS,CAAAM,KAAA,SAAAC,kBAAA,CAAIL,IAAI,CAACM,KAAK,CAAC,CAAC,CAAC,EAAC;EACtF,CAAC,CAAC;;EAGF,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAIC,KAAK,EAAc;IAAA,SAAAC,KAAA,GAAAd,SAAA,CAAAC,MAAA,EAATI,IAAI,OAAAC,KAAA,CAAAQ,KAAA,OAAAA,KAAA,WAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;MAAJV,IAAI,CAAAU,KAAA,QAAAf,SAAA,CAAAe,KAAA;IAAA;IAC/B,gBAAAP,MAAA,CAAgBT,MAAM,MAAAS,MAAA,CAAMT,MAAM,SAAM,EAAE,EAAAS,MAAA,CAAGK,KAAK,EAAAL,MAAA,CAAGL,SAAS,CAAAM,KAAA,SAAIJ,IAAI,CAAC;EACzE,CAAC;EAED,OAAOO,SAAS;AAClB"},"metadata":{},"sourceType":"module"}