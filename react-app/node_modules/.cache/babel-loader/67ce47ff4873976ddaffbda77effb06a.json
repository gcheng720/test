{"ast":null,"code":"import _slicedToArray from \"/home/snorlax5133/test/react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"BackdropProps\"],\n  _excluded2 = [\"anchor\", \"disableBackdropTransition\", \"disableDiscovery\", \"disableSwipeToOpen\", \"hideBackdrop\", \"hysteresis\", \"minFlingVelocity\", \"ModalProps\", \"onClose\", \"onOpen\", \"open\", \"PaperProps\", \"SwipeAreaProps\", \"swipeAreaWidth\", \"transitionDuration\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport { useThemeProps } from '@mui/system';\nimport { NoSsr } from '@mui/base';\nimport Drawer, { getAnchor, isHorizontal } from '../Drawer/Drawer';\nimport ownerDocument from '../utils/ownerDocument';\nimport ownerWindow from '../utils/ownerWindow';\nimport useEventCallback from '../utils/useEventCallback';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport { duration } from '../styles/createTransitions';\nimport useTheme from '../styles/useTheme';\nimport { getTransitionProps } from '../transitions/utils';\nimport SwipeArea from './SwipeArea'; // This value is closed to what browsers are using internally to\n// trigger a native scroll.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar UNCERTAINTY_THRESHOLD = 3; // px\n// This is the part of the drawer displayed on touch start.\n\nvar DRAG_STARTED_SIGNAL = 20; // px\n// We can only have one instance at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\n\nvar claimedSwipeInstance = null; // Exported for test purposes.\n\nexport function reset() {\n  claimedSwipeInstance = null;\n}\nfunction calculateCurrentX(anchor, touches, doc) {\n  return anchor === 'right' ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\nfunction calculateCurrentY(anchor, touches, containerWindow) {\n  return anchor === 'bottom' ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;\n}\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);\n}\n/**\n * @param {Element | null} element\n * @param {Element} rootNode\n */\n\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  var domTreeShapes = [];\n  while (element && element !== rootNode.parentElement) {\n    var style = ownerWindow(rootNode).getComputedStyle(element);\n    if (\n    // Ignore the scroll children if the element is absolute positioned.\n    style.getPropertyValue('position') === 'absolute' ||\n    // Ignore the scroll children if the element has an overflowX hidden\n    style.getPropertyValue('overflow-x') === 'hidden') {// noop\n    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n    element = element.parentElement;\n  }\n  return domTreeShapes;\n}\n/**\n * @param {object} param0\n * @param {ReturnType<getDomTreeShapes>} param0.domTreeShapes\n */\n\nfunction computeHasNativeHandler(_ref) {\n  var domTreeShapes = _ref.domTreeShapes,\n    start = _ref.start,\n    current = _ref.current,\n    anchor = _ref.anchor;\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  var axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop'\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight'\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight'\n    }\n  };\n  return domTreeShapes.some(function (shape) {\n    // Determine if we are going backward or forward.\n    var goingForward = current >= start;\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n    var axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    var scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);\n    var areNotAtStart = scrollPosition > 0;\n    var areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];\n    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {\n      return true;\n    }\n    return false;\n  });\n}\nvar iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nvar transitionDurationDefault = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen\n};\nvar SwipeableDrawer = /*#__PURE__*/React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  var props = useThemeProps({\n    name: 'MuiSwipeableDrawer',\n    props: inProps\n  });\n  var theme = useTheme();\n  var _props$anchor = props.anchor,\n    anchor = _props$anchor === void 0 ? 'left' : _props$anchor,\n    _props$disableBackdro = props.disableBackdropTransition,\n    disableBackdropTransition = _props$disableBackdro === void 0 ? false : _props$disableBackdro,\n    _props$disableDiscove = props.disableDiscovery,\n    disableDiscovery = _props$disableDiscove === void 0 ? false : _props$disableDiscove,\n    _props$disableSwipeTo = props.disableSwipeToOpen,\n    disableSwipeToOpen = _props$disableSwipeTo === void 0 ? iOS : _props$disableSwipeTo,\n    hideBackdrop = props.hideBackdrop,\n    _props$hysteresis = props.hysteresis,\n    hysteresis = _props$hysteresis === void 0 ? 0.52 : _props$hysteresis,\n    _props$minFlingVeloci = props.minFlingVelocity,\n    minFlingVelocity = _props$minFlingVeloci === void 0 ? 450 : _props$minFlingVeloci,\n    _props$ModalProps = props.ModalProps;\n  _props$ModalProps = _props$ModalProps === void 0 ? {} : _props$ModalProps;\n  var BackdropProps = _props$ModalProps.BackdropProps,\n    onClose = props.onClose,\n    onOpen = props.onOpen,\n    open = props.open,\n    _props$PaperProps = props.PaperProps,\n    PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,\n    SwipeAreaProps = props.SwipeAreaProps,\n    _props$swipeAreaWidth = props.swipeAreaWidth,\n    swipeAreaWidth = _props$swipeAreaWidth === void 0 ? 20 : _props$swipeAreaWidth,\n    _props$transitionDura = props.transitionDuration,\n    transitionDuration = _props$transitionDura === void 0 ? transitionDurationDefault : _props$transitionDura,\n    _props$variant = props.variant,\n    variant = _props$variant === void 0 ? 'temporary' : _props$variant,\n    ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, _excluded),\n    other = _objectWithoutPropertiesLoose(props, _excluded2);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    maybeSwiping = _React$useState2[0],\n    setMaybeSwiping = _React$useState2[1];\n  var swipeInstance = React.useRef({\n    isSwiping: null\n  });\n  var swipeAreaRef = React.useRef();\n  var backdropRef = React.useRef();\n  var paperRef = React.useRef();\n  var touchDetected = React.useRef(false); // Ref for transition duration based on / to match swipe speed\n\n  var calculatedDurationRef = React.useRef(); // Use a ref so the open value used is always up to date inside useCallback.\n\n  useEnhancedEffect(function () {\n    calculatedDurationRef.current = null;\n  }, [open]);\n  var setPosition = React.useCallback(function (translate) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _options$mode = options.mode,\n      mode = _options$mode === void 0 ? null : _options$mode,\n      _options$changeTransi = options.changeTransition,\n      changeTransition = _options$changeTransi === void 0 ? true : _options$changeTransi;\n    var anchorRtl = getAnchor(theme, anchor);\n    var rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;\n    var horizontalSwipe = isHorizontal(anchor);\n    var transform = horizontalSwipe ? \"translate(\".concat(rtlTranslateMultiplier * translate, \"px, 0)\") : \"translate(0, \".concat(rtlTranslateMultiplier * translate, \"px)\");\n    var drawerStyle = paperRef.current.style;\n    drawerStyle.webkitTransform = transform;\n    drawerStyle.transform = transform;\n    var transition = '';\n    if (mode) {\n      transition = theme.transitions.create('all', getTransitionProps({\n        easing: undefined,\n        style: undefined,\n        timeout: transitionDuration\n      }, {\n        mode: mode\n      }));\n    }\n    if (changeTransition) {\n      drawerStyle.webkitTransition = transition;\n      drawerStyle.transition = transition;\n    }\n    if (!disableBackdropTransition && !hideBackdrop) {\n      var backdropStyle = backdropRef.current.style;\n      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n      if (changeTransition) {\n        backdropStyle.webkitTransition = transition;\n        backdropStyle.transition = transition;\n      }\n    }\n  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);\n  var handleBodyTouchEnd = useEventCallback(function (nativeEvent) {\n    if (!touchDetected.current) {\n      return;\n    }\n    claimedSwipeInstance = null;\n    touchDetected.current = false;\n    setMaybeSwiping(false); // The swipe wasn't started.\n\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n    swipeInstance.current.isSwiping = null;\n    var anchorRtl = getAnchor(theme, anchor);\n    var horizontal = isHorizontal(anchor);\n    var current;\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument(nativeEvent.currentTarget));\n    } else {\n      current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow(nativeEvent.currentTarget));\n    }\n    var startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    var maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    var currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    var translateRatio = currentTranslate / maxTranslate;\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit'\n        });\n      }\n      return;\n    }\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter'\n      });\n    }\n  });\n  var handleBodyTouchMove = useEventCallback(function (nativeEvent) {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    } // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n\n    if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {\n      return;\n    }\n    var anchorRtl = getAnchor(theme, anchor);\n    var horizontalSwipe = isHorizontal(anchor);\n    var currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    var currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n    if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {\n      var domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);\n      var hasNativeHandler = computeHasNativeHandler({\n        domTreeShapes: domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor: anchor\n      });\n      if (hasNativeHandler) {\n        claimedSwipeInstance = true;\n        return;\n      }\n      claimedSwipeInstance = swipeInstance.current;\n    } // We don't know yet.\n\n    if (swipeInstance.current.isSwiping == null) {\n      var dx = Math.abs(currentX - swipeInstance.current.startX);\n      var dy = Math.abs(currentY - swipeInstance.current.startY);\n      var definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n      if (definitelySwiping && nativeEvent.cancelable) {\n        nativeEvent.preventDefault();\n      }\n      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(nativeEvent);\n          return;\n        } // Shift the starting point.\n\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.\n\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;\n          } else {\n            swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;\n          }\n        }\n      }\n    }\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n    var maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    var startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n    var translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        var paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n    var velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.\n\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.\n\n    if (nativeEvent.cancelable) {\n      nativeEvent.preventDefault();\n    }\n    setPosition(translate);\n  });\n  var handleBodyTouchStart = useEventCallback(function (nativeEvent) {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (nativeEvent.defaultPrevented) {\n      return;\n    } // We can only have one node at the time claiming ownership for handling the swipe.\n\n    if (nativeEvent.defaultMuiPrevented) {\n      return;\n    } // At least one element clogs the drawer interaction zone.\n\n    if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {\n      return;\n    }\n    var anchorRtl = getAnchor(theme, anchor);\n    var horizontalSwipe = isHorizontal(anchor);\n    var currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    var currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n    if (!open) {\n      if (disableSwipeToOpen || nativeEvent.target !== swipeAreaRef.current) {\n        return;\n      }\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n    nativeEvent.defaultMuiPrevented = true;\n    claimedSwipeInstance = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n    setMaybeSwiping(true);\n    if (!open && paperRef.current) {\n      // The ref may be null when a parent component updates while swiping.\n      setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {\n        changeTransition: false\n      });\n    }\n    swipeInstance.current.velocity = 0;\n    swipeInstance.current.lastTime = null;\n    swipeInstance.current.lastTranslate = null;\n    swipeInstance.current.paperHit = false;\n    touchDetected.current = true;\n  });\n  React.useEffect(function () {\n    if (variant === 'temporary') {\n      var doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart); // A blocking listener prevents Firefox's navbar to auto-hide on scroll.\n      // It only needs to prevent scrolling on the drawer's content when open.\n      // When closed, the overlay prevents scrolling.\n\n      doc.addEventListener('touchmove', handleBodyTouchMove, {\n        passive: !open\n      });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n      return function () {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, {\n          passive: !open\n        });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n    return undefined;\n  }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n  React.useEffect(function () {\n    return function () {\n      // We need to release the lock.\n      if (claimedSwipeInstance === swipeInstance.current) {\n        claimedSwipeInstance = null;\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Drawer, _extends({\n      open: variant === 'temporary' && maybeSwiping ? true : open,\n      variant: variant,\n      ModalProps: _extends({\n        BackdropProps: _extends({}, BackdropProps, {\n          ref: backdropRef\n        })\n      }, ModalPropsProp),\n      hideBackdrop: hideBackdrop,\n      PaperProps: _extends({}, PaperProps, {\n        style: _extends({\n          pointerEvents: variant === 'temporary' && !open ? 'none' : ''\n        }, PaperProps.style),\n        ref: paperRef\n      }),\n      anchor: anchor,\n      transitionDuration: calculatedDurationRef.current || transitionDuration,\n      onClose: onClose,\n      ref: ref\n    }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/_jsx(NoSsr, {\n      children: /*#__PURE__*/_jsx(SwipeArea, _extends({\n        anchor: anchor,\n        ref: swipeAreaRef,\n        width: swipeAreaWidth\n      }, SwipeAreaProps))\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SwipeableDrawer.propTypes\n/* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   * @default false\n   */\n  disableBackdropTransition: PropTypes.bool,\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   * @default false\n   */\n  disableDiscovery: PropTypes.bool,\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)\n   */\n  disableSwipeToOpen: PropTypes.bool,\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n  /**\n   * Affects how far the drawer must be opened/closed to change its state.\n   * Specified as percent (0-1) of the width of the drawer\n   * @default 0.52\n   */\n  hysteresis: PropTypes.number,\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   * @default 450\n   */\n  minFlingVelocity: PropTypes.number,\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes\n  /* @typescript-to-proptypes-ignore */.shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef\n    })\n  }),\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool.isRequired,\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes\n  /* @typescript-to-proptypes-ignore */.shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object\n  }),\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps: PropTypes.object,\n  /**\n   * The width of the left most (or right most) area in `px` that\n   * the drawer can be swiped open from.\n   * @default 20\n   */\n  swipeAreaWidth: PropTypes.number,\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default { enter: duration.enteringScreen, exit: duration.leavingScreen }\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\nexport default SwipeableDrawer;","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","PropTypes","elementTypeAcceptingRef","useThemeProps","NoSsr","Drawer","getAnchor","isHorizontal","ownerDocument","ownerWindow","useEventCallback","useEnhancedEffect","duration","useTheme","getTransitionProps","SwipeArea","jsx","_jsx","jsxs","_jsxs","UNCERTAINTY_THRESHOLD","DRAG_STARTED_SIGNAL","claimedSwipeInstance","reset","calculateCurrentX","anchor","touches","doc","body","offsetWidth","pageX","calculateCurrentY","containerWindow","innerHeight","clientY","getMaxTranslate","horizontalSwipe","paperInstance","clientWidth","clientHeight","getTranslate","currentTranslate","startLocation","open","maxTranslate","Math","min","max","getDomTreeShapes","element","rootNode","domTreeShapes","parentElement","style","getComputedStyle","getPropertyValue","scrollWidth","scrollHeight","push","computeHasNativeHandler","_ref","start","current","axisProperties","scrollPosition","x","y","scrollLength","clientLength","some","shape","goingForward","axis","round","areNotAtStart","areNotAtEnd","iOS","navigator","test","userAgent","transitionDurationDefault","enter","enteringScreen","exit","leavingScreen","SwipeableDrawer","forwardRef","inProps","ref","props","name","theme","_props$anchor","_props$disableBackdro","disableBackdropTransition","_props$disableDiscove","disableDiscovery","_props$disableSwipeTo","disableSwipeToOpen","hideBackdrop","_props$hysteresis","hysteresis","_props$minFlingVeloci","minFlingVelocity","_props$ModalProps","ModalProps","BackdropProps","onClose","onOpen","_props$PaperProps","PaperProps","SwipeAreaProps","_props$swipeAreaWidth","swipeAreaWidth","_props$transitionDura","transitionDuration","_props$variant","variant","ModalPropsProp","other","_React$useState","useState","_React$useState2","_slicedToArray","maybeSwiping","setMaybeSwiping","swipeInstance","useRef","isSwiping","swipeAreaRef","backdropRef","paperRef","touchDetected","calculatedDurationRef","setPosition","useCallback","translate","options","arguments","length","undefined","_options$mode","mode","_options$changeTransi","changeTransition","anchorRtl","rtlTranslateMultiplier","indexOf","transform","concat","drawerStyle","webkitTransform","transition","transitions","create","easing","timeout","webkitTransition","backdropStyle","opacity","handleBodyTouchEnd","nativeEvent","horizontal","changedTouches","currentTarget","startX","startY","translateRatio","abs","velocity","handleBodyTouchMove","currentX","currentY","contains","target","hasNativeHandler","dx","dy","definitelySwiping","cancelable","preventDefault","paperHit","lastTranslate","lastTime","performance","now","handleBodyTouchStart","defaultPrevented","defaultMuiPrevented","useEffect","addEventListener","passive","removeEventListener","Fragment","children","pointerEvents","width","process","env","NODE_ENV","propTypes","oneOf","node","bool","number","component","func","isRequired","object","oneOfType","appear"],"sources":["/home/snorlax5133/test/react-app/node_modules/@mui/material/SwipeableDrawer/SwipeableDrawer.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"BackdropProps\"],\n      _excluded2 = [\"anchor\", \"disableBackdropTransition\", \"disableDiscovery\", \"disableSwipeToOpen\", \"hideBackdrop\", \"hysteresis\", \"minFlingVelocity\", \"ModalProps\", \"onClose\", \"onOpen\", \"open\", \"PaperProps\", \"SwipeAreaProps\", \"swipeAreaWidth\", \"transitionDuration\", \"variant\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { elementTypeAcceptingRef } from '@mui/utils';\nimport { useThemeProps } from '@mui/system';\nimport { NoSsr } from '@mui/base';\nimport Drawer, { getAnchor, isHorizontal } from '../Drawer/Drawer';\nimport ownerDocument from '../utils/ownerDocument';\nimport ownerWindow from '../utils/ownerWindow';\nimport useEventCallback from '../utils/useEventCallback';\nimport useEnhancedEffect from '../utils/useEnhancedEffect';\nimport { duration } from '../styles/createTransitions';\nimport useTheme from '../styles/useTheme';\nimport { getTransitionProps } from '../transitions/utils';\nimport SwipeArea from './SwipeArea'; // This value is closed to what browsers are using internally to\n// trigger a native scroll.\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst UNCERTAINTY_THRESHOLD = 3; // px\n// This is the part of the drawer displayed on touch start.\n\nconst DRAG_STARTED_SIGNAL = 20; // px\n// We can only have one instance at the time claiming ownership for handling the swipe.\n// Otherwise, the UX would be confusing.\n// That's why we use a singleton here.\n\nlet claimedSwipeInstance = null; // Exported for test purposes.\n\nexport function reset() {\n  claimedSwipeInstance = null;\n}\n\nfunction calculateCurrentX(anchor, touches, doc) {\n  return anchor === 'right' ? doc.body.offsetWidth - touches[0].pageX : touches[0].pageX;\n}\n\nfunction calculateCurrentY(anchor, touches, containerWindow) {\n  return anchor === 'bottom' ? containerWindow.innerHeight - touches[0].clientY : touches[0].clientY;\n}\n\nfunction getMaxTranslate(horizontalSwipe, paperInstance) {\n  return horizontalSwipe ? paperInstance.clientWidth : paperInstance.clientHeight;\n}\n\nfunction getTranslate(currentTranslate, startLocation, open, maxTranslate) {\n  return Math.min(Math.max(open ? startLocation - currentTranslate : maxTranslate + startLocation - currentTranslate, 0), maxTranslate);\n}\n/**\n * @param {Element | null} element\n * @param {Element} rootNode\n */\n\n\nfunction getDomTreeShapes(element, rootNode) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L129\n  const domTreeShapes = [];\n\n  while (element && element !== rootNode.parentElement) {\n    const style = ownerWindow(rootNode).getComputedStyle(element);\n\n    if ( // Ignore the scroll children if the element is absolute positioned.\n    style.getPropertyValue('position') === 'absolute' || // Ignore the scroll children if the element has an overflowX hidden\n    style.getPropertyValue('overflow-x') === 'hidden') {// noop\n    } else if (element.clientWidth > 0 && element.scrollWidth > element.clientWidth || element.clientHeight > 0 && element.scrollHeight > element.clientHeight) {\n      // Ignore the nodes that have no width.\n      // Keep elements with a scroll\n      domTreeShapes.push(element);\n    }\n\n    element = element.parentElement;\n  }\n\n  return domTreeShapes;\n}\n/**\n * @param {object} param0\n * @param {ReturnType<getDomTreeShapes>} param0.domTreeShapes\n */\n\n\nfunction computeHasNativeHandler({\n  domTreeShapes,\n  start,\n  current,\n  anchor\n}) {\n  // Adapted from https://github.com/oliviertassinari/react-swipeable-views/blob/7666de1dba253b896911adf2790ce51467670856/packages/react-swipeable-views/src/SwipeableViews.js#L175\n  const axisProperties = {\n    scrollPosition: {\n      x: 'scrollLeft',\n      y: 'scrollTop'\n    },\n    scrollLength: {\n      x: 'scrollWidth',\n      y: 'scrollHeight'\n    },\n    clientLength: {\n      x: 'clientWidth',\n      y: 'clientHeight'\n    }\n  };\n  return domTreeShapes.some(shape => {\n    // Determine if we are going backward or forward.\n    let goingForward = current >= start;\n\n    if (anchor === 'top' || anchor === 'left') {\n      goingForward = !goingForward;\n    }\n\n    const axis = anchor === 'left' || anchor === 'right' ? 'x' : 'y';\n    const scrollPosition = Math.round(shape[axisProperties.scrollPosition[axis]]);\n    const areNotAtStart = scrollPosition > 0;\n    const areNotAtEnd = scrollPosition + shape[axisProperties.clientLength[axis]] < shape[axisProperties.scrollLength[axis]];\n\n    if (goingForward && areNotAtEnd || !goingForward && areNotAtStart) {\n      return true;\n    }\n\n    return false;\n  });\n}\n\nconst iOS = typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent);\nconst transitionDurationDefault = {\n  enter: duration.enteringScreen,\n  exit: duration.leavingScreen\n};\nconst SwipeableDrawer = /*#__PURE__*/React.forwardRef(function SwipeableDrawer(inProps, ref) {\n  const props = useThemeProps({\n    name: 'MuiSwipeableDrawer',\n    props: inProps\n  });\n  const theme = useTheme();\n\n  const {\n    anchor = 'left',\n    disableBackdropTransition = false,\n    disableDiscovery = false,\n    disableSwipeToOpen = iOS,\n    hideBackdrop,\n    hysteresis = 0.52,\n    minFlingVelocity = 450,\n    ModalProps: {\n      BackdropProps\n    } = {},\n    onClose,\n    onOpen,\n    open,\n    PaperProps = {},\n    SwipeAreaProps,\n    swipeAreaWidth = 20,\n    transitionDuration = transitionDurationDefault,\n    variant = 'temporary'\n  } = props,\n        ModalPropsProp = _objectWithoutPropertiesLoose(props.ModalProps, _excluded),\n        other = _objectWithoutPropertiesLoose(props, _excluded2);\n\n  const [maybeSwiping, setMaybeSwiping] = React.useState(false);\n  const swipeInstance = React.useRef({\n    isSwiping: null\n  });\n  const swipeAreaRef = React.useRef();\n  const backdropRef = React.useRef();\n  const paperRef = React.useRef();\n  const touchDetected = React.useRef(false); // Ref for transition duration based on / to match swipe speed\n\n  const calculatedDurationRef = React.useRef(); // Use a ref so the open value used is always up to date inside useCallback.\n\n  useEnhancedEffect(() => {\n    calculatedDurationRef.current = null;\n  }, [open]);\n  const setPosition = React.useCallback((translate, options = {}) => {\n    const {\n      mode = null,\n      changeTransition = true\n    } = options;\n    const anchorRtl = getAnchor(theme, anchor);\n    const rtlTranslateMultiplier = ['right', 'bottom'].indexOf(anchorRtl) !== -1 ? 1 : -1;\n    const horizontalSwipe = isHorizontal(anchor);\n    const transform = horizontalSwipe ? `translate(${rtlTranslateMultiplier * translate}px, 0)` : `translate(0, ${rtlTranslateMultiplier * translate}px)`;\n    const drawerStyle = paperRef.current.style;\n    drawerStyle.webkitTransform = transform;\n    drawerStyle.transform = transform;\n    let transition = '';\n\n    if (mode) {\n      transition = theme.transitions.create('all', getTransitionProps({\n        easing: undefined,\n        style: undefined,\n        timeout: transitionDuration\n      }, {\n        mode\n      }));\n    }\n\n    if (changeTransition) {\n      drawerStyle.webkitTransition = transition;\n      drawerStyle.transition = transition;\n    }\n\n    if (!disableBackdropTransition && !hideBackdrop) {\n      const backdropStyle = backdropRef.current.style;\n      backdropStyle.opacity = 1 - translate / getMaxTranslate(horizontalSwipe, paperRef.current);\n\n      if (changeTransition) {\n        backdropStyle.webkitTransition = transition;\n        backdropStyle.transition = transition;\n      }\n    }\n  }, [anchor, disableBackdropTransition, hideBackdrop, theme, transitionDuration]);\n  const handleBodyTouchEnd = useEventCallback(nativeEvent => {\n    if (!touchDetected.current) {\n      return;\n    }\n\n    claimedSwipeInstance = null;\n    touchDetected.current = false;\n    setMaybeSwiping(false); // The swipe wasn't started.\n\n    if (!swipeInstance.current.isSwiping) {\n      swipeInstance.current.isSwiping = null;\n      return;\n    }\n\n    swipeInstance.current.isSwiping = null;\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontal = isHorizontal(anchor);\n    let current;\n\n    if (horizontal) {\n      current = calculateCurrentX(anchorRtl, nativeEvent.changedTouches, ownerDocument(nativeEvent.currentTarget));\n    } else {\n      current = calculateCurrentY(anchorRtl, nativeEvent.changedTouches, ownerWindow(nativeEvent.currentTarget));\n    }\n\n    const startLocation = horizontal ? swipeInstance.current.startX : swipeInstance.current.startY;\n    const maxTranslate = getMaxTranslate(horizontal, paperRef.current);\n    const currentTranslate = getTranslate(current, startLocation, open, maxTranslate);\n    const translateRatio = currentTranslate / maxTranslate;\n\n    if (Math.abs(swipeInstance.current.velocity) > minFlingVelocity) {\n      // Calculate transition duration to match swipe speed\n      calculatedDurationRef.current = Math.abs((maxTranslate - currentTranslate) / swipeInstance.current.velocity) * 1000;\n    }\n\n    if (open) {\n      if (swipeInstance.current.velocity > minFlingVelocity || translateRatio > hysteresis) {\n        onClose();\n      } else {\n        // Reset the position, the swipe was aborted.\n        setPosition(0, {\n          mode: 'exit'\n        });\n      }\n\n      return;\n    }\n\n    if (swipeInstance.current.velocity < -minFlingVelocity || 1 - translateRatio > hysteresis) {\n      onOpen();\n    } else {\n      // Reset the position, the swipe was aborted.\n      setPosition(getMaxTranslate(horizontal, paperRef.current), {\n        mode: 'enter'\n      });\n    }\n  });\n  const handleBodyTouchMove = useEventCallback(nativeEvent => {\n    // the ref may be null when a parent component updates while swiping\n    if (!paperRef.current || !touchDetected.current) {\n      return;\n    } // We are not supposed to handle this touch move because the swipe was started in a scrollable container in the drawer\n\n\n    if (claimedSwipeInstance !== null && claimedSwipeInstance !== swipeInstance.current) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n\n    if (open && paperRef.current.contains(nativeEvent.target) && claimedSwipeInstance === null) {\n      const domTreeShapes = getDomTreeShapes(nativeEvent.target, paperRef.current);\n      const hasNativeHandler = computeHasNativeHandler({\n        domTreeShapes,\n        start: horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY,\n        current: horizontalSwipe ? currentX : currentY,\n        anchor\n      });\n\n      if (hasNativeHandler) {\n        claimedSwipeInstance = true;\n        return;\n      }\n\n      claimedSwipeInstance = swipeInstance.current;\n    } // We don't know yet.\n\n\n    if (swipeInstance.current.isSwiping == null) {\n      const dx = Math.abs(currentX - swipeInstance.current.startX);\n      const dy = Math.abs(currentY - swipeInstance.current.startY);\n      const definitelySwiping = horizontalSwipe ? dx > dy && dx > UNCERTAINTY_THRESHOLD : dy > dx && dy > UNCERTAINTY_THRESHOLD;\n\n      if (definitelySwiping && nativeEvent.cancelable) {\n        nativeEvent.preventDefault();\n      }\n\n      if (definitelySwiping === true || (horizontalSwipe ? dy > UNCERTAINTY_THRESHOLD : dx > UNCERTAINTY_THRESHOLD)) {\n        swipeInstance.current.isSwiping = definitelySwiping;\n\n        if (!definitelySwiping) {\n          handleBodyTouchEnd(nativeEvent);\n          return;\n        } // Shift the starting point.\n\n\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY; // Compensate for the part of the drawer displayed on touch start.\n\n        if (!disableDiscovery && !open) {\n          if (horizontalSwipe) {\n            swipeInstance.current.startX -= DRAG_STARTED_SIGNAL;\n          } else {\n            swipeInstance.current.startY -= DRAG_STARTED_SIGNAL;\n          }\n        }\n      }\n    }\n\n    if (!swipeInstance.current.isSwiping) {\n      return;\n    }\n\n    const maxTranslate = getMaxTranslate(horizontalSwipe, paperRef.current);\n    let startLocation = horizontalSwipe ? swipeInstance.current.startX : swipeInstance.current.startY;\n\n    if (open && !swipeInstance.current.paperHit) {\n      startLocation = Math.min(startLocation, maxTranslate);\n    }\n\n    const translate = getTranslate(horizontalSwipe ? currentX : currentY, startLocation, open, maxTranslate);\n\n    if (open) {\n      if (!swipeInstance.current.paperHit) {\n        const paperHit = horizontalSwipe ? currentX < maxTranslate : currentY < maxTranslate;\n\n        if (paperHit) {\n          swipeInstance.current.paperHit = true;\n          swipeInstance.current.startX = currentX;\n          swipeInstance.current.startY = currentY;\n        } else {\n          return;\n        }\n      } else if (translate === 0) {\n        swipeInstance.current.startX = currentX;\n        swipeInstance.current.startY = currentY;\n      }\n    }\n\n    if (swipeInstance.current.lastTranslate === null) {\n      swipeInstance.current.lastTranslate = translate;\n      swipeInstance.current.lastTime = performance.now() + 1;\n    }\n\n    const velocity = (translate - swipeInstance.current.lastTranslate) / (performance.now() - swipeInstance.current.lastTime) * 1e3; // Low Pass filter.\n\n    swipeInstance.current.velocity = swipeInstance.current.velocity * 0.4 + velocity * 0.6;\n    swipeInstance.current.lastTranslate = translate;\n    swipeInstance.current.lastTime = performance.now(); // We are swiping, let's prevent the scroll event on iOS.\n\n    if (nativeEvent.cancelable) {\n      nativeEvent.preventDefault();\n    }\n\n    setPosition(translate);\n  });\n  const handleBodyTouchStart = useEventCallback(nativeEvent => {\n    // We are not supposed to handle this touch move.\n    // Example of use case: ignore the event if there is a Slider.\n    if (nativeEvent.defaultPrevented) {\n      return;\n    } // We can only have one node at the time claiming ownership for handling the swipe.\n\n\n    if (nativeEvent.defaultMuiPrevented) {\n      return;\n    } // At least one element clogs the drawer interaction zone.\n\n\n    if (open && (hideBackdrop || !backdropRef.current.contains(nativeEvent.target)) && !paperRef.current.contains(nativeEvent.target)) {\n      return;\n    }\n\n    const anchorRtl = getAnchor(theme, anchor);\n    const horizontalSwipe = isHorizontal(anchor);\n    const currentX = calculateCurrentX(anchorRtl, nativeEvent.touches, ownerDocument(nativeEvent.currentTarget));\n    const currentY = calculateCurrentY(anchorRtl, nativeEvent.touches, ownerWindow(nativeEvent.currentTarget));\n\n    if (!open) {\n      if (disableSwipeToOpen || nativeEvent.target !== swipeAreaRef.current) {\n        return;\n      }\n\n      if (horizontalSwipe) {\n        if (currentX > swipeAreaWidth) {\n          return;\n        }\n      } else if (currentY > swipeAreaWidth) {\n        return;\n      }\n    }\n\n    nativeEvent.defaultMuiPrevented = true;\n    claimedSwipeInstance = null;\n    swipeInstance.current.startX = currentX;\n    swipeInstance.current.startY = currentY;\n    setMaybeSwiping(true);\n\n    if (!open && paperRef.current) {\n      // The ref may be null when a parent component updates while swiping.\n      setPosition(getMaxTranslate(horizontalSwipe, paperRef.current) + (disableDiscovery ? 15 : -DRAG_STARTED_SIGNAL), {\n        changeTransition: false\n      });\n    }\n\n    swipeInstance.current.velocity = 0;\n    swipeInstance.current.lastTime = null;\n    swipeInstance.current.lastTranslate = null;\n    swipeInstance.current.paperHit = false;\n    touchDetected.current = true;\n  });\n  React.useEffect(() => {\n    if (variant === 'temporary') {\n      const doc = ownerDocument(paperRef.current);\n      doc.addEventListener('touchstart', handleBodyTouchStart); // A blocking listener prevents Firefox's navbar to auto-hide on scroll.\n      // It only needs to prevent scrolling on the drawer's content when open.\n      // When closed, the overlay prevents scrolling.\n\n      doc.addEventListener('touchmove', handleBodyTouchMove, {\n        passive: !open\n      });\n      doc.addEventListener('touchend', handleBodyTouchEnd);\n      return () => {\n        doc.removeEventListener('touchstart', handleBodyTouchStart);\n        doc.removeEventListener('touchmove', handleBodyTouchMove, {\n          passive: !open\n        });\n        doc.removeEventListener('touchend', handleBodyTouchEnd);\n      };\n    }\n\n    return undefined;\n  }, [variant, open, handleBodyTouchStart, handleBodyTouchMove, handleBodyTouchEnd]);\n  React.useEffect(() => () => {\n    // We need to release the lock.\n    if (claimedSwipeInstance === swipeInstance.current) {\n      claimedSwipeInstance = null;\n    }\n  }, []);\n  React.useEffect(() => {\n    if (!open) {\n      setMaybeSwiping(false);\n    }\n  }, [open]);\n  return /*#__PURE__*/_jsxs(React.Fragment, {\n    children: [/*#__PURE__*/_jsx(Drawer, _extends({\n      open: variant === 'temporary' && maybeSwiping ? true : open,\n      variant: variant,\n      ModalProps: _extends({\n        BackdropProps: _extends({}, BackdropProps, {\n          ref: backdropRef\n        })\n      }, ModalPropsProp),\n      hideBackdrop: hideBackdrop,\n      PaperProps: _extends({}, PaperProps, {\n        style: _extends({\n          pointerEvents: variant === 'temporary' && !open ? 'none' : ''\n        }, PaperProps.style),\n        ref: paperRef\n      }),\n      anchor: anchor,\n      transitionDuration: calculatedDurationRef.current || transitionDuration,\n      onClose: onClose,\n      ref: ref\n    }, other)), !disableSwipeToOpen && variant === 'temporary' && /*#__PURE__*/_jsx(NoSsr, {\n      children: /*#__PURE__*/_jsx(SwipeArea, _extends({\n        anchor: anchor,\n        ref: swipeAreaRef,\n        width: swipeAreaWidth\n      }, SwipeAreaProps))\n    })]\n  });\n});\nprocess.env.NODE_ENV !== \"production\" ? SwipeableDrawer.propTypes\n/* remove-proptypes */\n= {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * @ignore\n   */\n  anchor: PropTypes.oneOf(['bottom', 'left', 'right', 'top']),\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Disable the backdrop transition.\n   * This can improve the FPS on low-end devices.\n   * @default false\n   */\n  disableBackdropTransition: PropTypes.bool,\n\n  /**\n   * If `true`, touching the screen near the edge of the drawer will not slide in the drawer a bit\n   * to promote accidental discovery of the swipe gesture.\n   * @default false\n   */\n  disableDiscovery: PropTypes.bool,\n\n  /**\n   * If `true`, swipe to open is disabled. This is useful in browsers where swiping triggers\n   * navigation actions. Swipe to open is disabled on iOS browsers by default.\n   * @default typeof navigator !== 'undefined' && /iPad|iPhone|iPod/.test(navigator.userAgent)\n   */\n  disableSwipeToOpen: PropTypes.bool,\n\n  /**\n   * @ignore\n   */\n  hideBackdrop: PropTypes.bool,\n\n  /**\n   * Affects how far the drawer must be opened/closed to change its state.\n   * Specified as percent (0-1) of the width of the drawer\n   * @default 0.52\n   */\n  hysteresis: PropTypes.number,\n\n  /**\n   * Defines, from which (average) velocity on, the swipe is\n   * defined as complete although hysteresis isn't reached.\n   * Good threshold is between 250 - 1000 px/s\n   * @default 450\n   */\n  minFlingVelocity: PropTypes.number,\n\n  /**\n   * @ignore\n   */\n  ModalProps: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    BackdropProps: PropTypes.shape({\n      component: elementTypeAcceptingRef\n    })\n  }),\n\n  /**\n   * Callback fired when the component requests to be closed.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onClose: PropTypes.func.isRequired,\n\n  /**\n   * Callback fired when the component requests to be opened.\n   *\n   * @param {object} event The event source of the callback.\n   */\n  onOpen: PropTypes.func.isRequired,\n\n  /**\n   * If `true`, the component is shown.\n   */\n  open: PropTypes.bool.isRequired,\n\n  /**\n   * @ignore\n   */\n  PaperProps: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .shape({\n    component: elementTypeAcceptingRef,\n    style: PropTypes.object\n  }),\n\n  /**\n   * The element is used to intercept the touch events on the edge.\n   */\n  SwipeAreaProps: PropTypes.object,\n\n  /**\n   * The width of the left most (or right most) area in `px` that\n   * the drawer can be swiped open from.\n   * @default 20\n   */\n  swipeAreaWidth: PropTypes.number,\n\n  /**\n   * The duration for the transition, in milliseconds.\n   * You may specify a single timeout for all transitions, or individually with an object.\n   * @default { enter: duration.enteringScreen, exit: duration.leavingScreen }\n   */\n  transitionDuration: PropTypes.oneOfType([PropTypes.number, PropTypes.shape({\n    appear: PropTypes.number,\n    enter: PropTypes.number,\n    exit: PropTypes.number\n  })]),\n\n  /**\n   * @ignore\n   */\n  variant: PropTypes.oneOf(['permanent', 'persistent', 'temporary'])\n} : void 0;\nexport default SwipeableDrawer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}