{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getLineNumber = exports.getEditorBounds = exports.clearInlineStyles = exports.isGreaterThan = exports.atomicBlockExists = exports.removeBlockFromMap = exports.getSelectionInfo = void 0;\nvar draft_js_1 = require(\"draft-js\");\n/**\n * Get the current selection details\n */\nvar getSelectionInfo = function getSelectionInfo(editorState) {\n  var selection = editorState.getSelection();\n  var startOffset = selection.getStartOffset();\n  var currentContent = editorState.getCurrentContent();\n  var contentBlock = currentContent.getBlockForKey(selection.getStartKey());\n  var currentStyle = editorState.getCurrentInlineStyle();\n  var linkKey = contentBlock.getEntityAt(startOffset);\n  var entityType = \"\";\n  if (linkKey) {\n    var linkInstance = currentContent.getEntity(linkKey);\n    entityType = linkInstance.getType();\n  }\n  return {\n    inlineStyle: currentStyle,\n    blockType: contentBlock.getType(),\n    entityType: entityType,\n    linkKey: linkKey,\n    block: contentBlock\n  };\n};\nexports.getSelectionInfo = getSelectionInfo;\n/**\n * Remove a block from the ContentState\n */\nvar removeBlockFromMap = function removeBlockFromMap(editorState, block) {\n  var contentState = editorState.getCurrentContent();\n  var removeBlockContentState = draft_js_1.Modifier.removeRange(contentState, new draft_js_1.SelectionState({\n    anchorKey: block.getKey(),\n    anchorOffset: 0,\n    focusKey: block.getKey(),\n    focusOffset: block.getLength()\n  }), 'backward');\n  var blockMap = removeBlockContentState.getBlockMap().delete(block.getKey());\n  return removeBlockContentState.merge({\n    blockMap: blockMap,\n    selectionAfter: contentState.getSelectionAfter()\n  });\n};\nexports.removeBlockFromMap = removeBlockFromMap;\nvar atomicBlockExists = function atomicBlockExists(name, controls) {\n  if (!controls) {\n    return undefined;\n  }\n  return controls.find(function (control) {\n    return control.type === \"atomic\" && control.name === name && control.atomicComponent !== undefined;\n  });\n};\nexports.atomicBlockExists = atomicBlockExists;\nvar isGreaterThan = function isGreaterThan(value, maxValue) {\n  if (!maxValue) {\n    return false;\n  }\n  return value > maxValue;\n};\nexports.isGreaterThan = isGreaterThan;\nvar clearInlineStyles = function clearInlineStyles(editorState, customStyles) {\n  var styles = ['BOLD', 'ITALIC', 'UNDERLINE'];\n  if (customStyles) {\n    styles = styles.concat(Object.getOwnPropertyNames(customStyles));\n  }\n  return styles.reduce(function (newContentState, style) {\n    return draft_js_1.Modifier.removeInlineStyle(newContentState, editorState.getSelection(), style);\n  }, editorState.getCurrentContent());\n};\nexports.clearInlineStyles = clearInlineStyles;\nvar getEditorBounds = function getEditorBounds(editor) {\n  var fakeClientRect = (0, draft_js_1.getVisibleSelectionRect)(window);\n  return {\n    selectionRect: fakeClientRect ? {\n      top: fakeClientRect === null || fakeClientRect === void 0 ? void 0 : fakeClientRect.top,\n      left: fakeClientRect === null || fakeClientRect === void 0 ? void 0 : fakeClientRect.left\n    } : null,\n    editorRect: editor.getBoundingClientRect()\n  };\n};\nexports.getEditorBounds = getEditorBounds;\nvar getLineNumber = function getLineNumber(editorState) {\n  var currentBlockKey = editorState.getSelection().getStartKey();\n  return editorState.getCurrentContent().getBlockMap().keySeq().findIndex(function (k) {\n    return k === currentBlockKey;\n  });\n};\nexports.getLineNumber = getLineNumber;","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getLineNumber = exports.getEditorBounds = exports.clearInlineStyles = exports.isGreaterThan = exports.atomicBlockExists = exports.removeBlockFromMap = exports.getSelectionInfo = void 0;\nvar draft_js_1 = require(\"draft-js\");\n/**\n * Get the current selection details\n */\nvar getSelectionInfo = function (editorState) {\n    var selection = editorState.getSelection();\n    var startOffset = selection.getStartOffset();\n    var currentContent = editorState.getCurrentContent();\n    var contentBlock = currentContent.getBlockForKey(selection.getStartKey());\n    var currentStyle = editorState.getCurrentInlineStyle();\n    var linkKey = contentBlock.getEntityAt(startOffset);\n    var entityType = \"\";\n    if (linkKey) {\n        var linkInstance = currentContent.getEntity(linkKey);\n        entityType = linkInstance.getType();\n    }\n    return {\n        inlineStyle: currentStyle,\n        blockType: contentBlock.getType(),\n        entityType: entityType,\n        linkKey: linkKey,\n        block: contentBlock\n    };\n};\nexports.getSelectionInfo = getSelectionInfo;\n/**\n * Remove a block from the ContentState\n */\nvar removeBlockFromMap = function (editorState, block) {\n    var contentState = editorState.getCurrentContent();\n    var removeBlockContentState = draft_js_1.Modifier.removeRange(contentState, new draft_js_1.SelectionState({\n        anchorKey: block.getKey(),\n        anchorOffset: 0,\n        focusKey: block.getKey(),\n        focusOffset: block.getLength(),\n    }), 'backward');\n    var blockMap = removeBlockContentState.getBlockMap().delete(block.getKey());\n    return removeBlockContentState.merge({\n        blockMap: blockMap,\n        selectionAfter: contentState.getSelectionAfter()\n    });\n};\nexports.removeBlockFromMap = removeBlockFromMap;\nvar atomicBlockExists = function (name, controls) {\n    if (!controls) {\n        return undefined;\n    }\n    return controls.find(function (control) {\n        return control.type === \"atomic\" &&\n            control.name === name &&\n            control.atomicComponent !== undefined;\n    });\n};\nexports.atomicBlockExists = atomicBlockExists;\nvar isGreaterThan = function (value, maxValue) {\n    if (!maxValue) {\n        return false;\n    }\n    return value > maxValue;\n};\nexports.isGreaterThan = isGreaterThan;\nvar clearInlineStyles = function (editorState, customStyles) {\n    var styles = ['BOLD', 'ITALIC', 'UNDERLINE'];\n    if (customStyles) {\n        styles = styles.concat(Object.getOwnPropertyNames(customStyles));\n    }\n    return styles.reduce(function (newContentState, style) { return (draft_js_1.Modifier.removeInlineStyle(newContentState, editorState.getSelection(), style)); }, editorState.getCurrentContent());\n};\nexports.clearInlineStyles = clearInlineStyles;\nvar getEditorBounds = function (editor) {\n    var fakeClientRect = (0, draft_js_1.getVisibleSelectionRect)(window);\n    return {\n        selectionRect: fakeClientRect ? {\n            top: fakeClientRect === null || fakeClientRect === void 0 ? void 0 : fakeClientRect.top,\n            left: fakeClientRect === null || fakeClientRect === void 0 ? void 0 : fakeClientRect.left\n        } : null,\n        editorRect: editor.getBoundingClientRect()\n    };\n};\nexports.getEditorBounds = getEditorBounds;\nvar getLineNumber = function (editorState) {\n    var currentBlockKey = editorState.getSelection().getStartKey();\n    return editorState.getCurrentContent().getBlockMap()\n        .keySeq().findIndex(function (k) { return k === currentBlockKey; });\n};\nexports.getLineNumber = getLineNumber;\n"]},"metadata":{},"sourceType":"script"}